<h1>Welcome to Lato</h1>
<p class="lead">This is the official documentation. A <b>short guide on how to customize</b> a new project.</p>

<% if params[:generate_docs] %>
<div class="alert alert-info mt-3">
<p>
These pages were generated by downloading the rendered HTML templates from Lato's dummy app.<br>
<b>Some features might not be available</b>. To use the full documentation, you need to run the gem locally using the following commands:
</p>
<pre>
$ git clone https://github.com/lato-org/lato
$ cd lato
$ bundle
$ rails db:migrate
$ rails db:seed
$ foreman start -f Procfile.dev
</pre>
</div>
<% end %>

<h2>Getting Started</h2>
<p>
To create custom presentation pages for your project, you can modify the <code>ApplicationController</code> by extending the <code>Lato::ApplicationController</code> class and specifying the use of Lato's layout:
</p>

<pre>
class ApplicationController < Lato::ApplicationController
  layout 'lato/application'

  def index; end
end
</pre>

<p>
<%= link_to 'Source code: Example', 'https://github.com/lato-org/lato/blob/main/test/dummy/app/controllers/application_controller.rb', target: '_blank' %><br>
<%= link_to 'Source code: Lato::ApplicationController', 'https://github.com/lato-org/lato/blob/main/app/controllers/lato/application_controller.rb', target: '_blank' %>
</p>

<h2>How to Hide the Sidebar</h2>
<p>
To hide the sidebar, you can use one of the methods provided by the <code>Lato::Layoutable</code> concern (already included via <code>Lato::ApplicationController</code>):
</p>

<pre>
class ApplicationController < Lato::ApplicationController
  layout 'lato/application'

  def index
    hide_sidebar
  end
end
</pre>

<p>
To apply this rule to all controller actions, you can quickly use <code>before_action</code>:
</p>

<pre>
class ApplicationController < Lato::ApplicationController
  layout 'lato/application'
  before_action :hide_sidebar

  def index; end

  def other_action; end
end
</pre>

<p>
<%= link_to 'Source code: Lato::Layoutable', 'https://github.com/lato-org/lato/blob/main/app/controllers/concerns/lato/layoutable.rb', target: '_blank' %>
</p>

<h2>How to Use Custom CSS and Customize Bootstrap</h2>

<p>
To customize Lato's CSS, you can modify your main application's <code>application.scss</code> file:
</p>

<pre>
@import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap');

// Override bootstrap variables
$font-family-base: 'Lato' !default;
$primary: #03256C;

// Import Lato CSS
@import 'lato/application';

// Add custom CSS
pre {
  border-radius: 15px;
}
</pre>

<p>
<%= link_to 'Source code: Example', 'https://github.com/lato-org/lato/blob/main/test/dummy/app/assets/stylesheets/application.scss', target: '_blank' %><br>
<%= link_to 'Source code: Bootstrap SCSS Variables', 'https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss', target: '_blank' %>
</p>

<h2>How to Use Custom Stimulus JS Controllers</h2>

<p>
Stimulus JS is a dependency of Lato and can be used normally without specific integrations.<br>
Below is an example of using a custom controller <code>hello_controller.js</code> and a Lato controller <code>lato_hello_controller.js</code>:

<div data-controller="hello" class="text-success"></div>

<div data-controller="lato-hello" class="text-info"></div>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Notes</h4>
  <p>
  All controllers handled by Lato are named, by definition, <code>lato_name_controller.js</code>.<br>
  Example: <code>lato_hello_controller.js</code> is used with the attribute <code>data-controller="lato_hello"</code>.
  </p>
</div>

<div class="mt-5 mb-5 d-flex justify-content-between">
<span></span>
<%= link_to 'Continue', lato.authentication_signin_path, class: 'btn btn-primary btn-lg' %>
</div>
