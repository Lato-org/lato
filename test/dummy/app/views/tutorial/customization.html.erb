<%= lato_page_head 'Customization', [
  { label: 'Tutorial', path: tutorial_path },
  { label: 'Customization' }
] %>

<p>
Lato can be customized in several ways:
</p>

<ul>
  <li>Configure Bootstrap layout classes using the <code>Lato::Btstrap</code> class;</li>
  <li>Customize layout behavior via the <code>Lato::Layoutable</code> concern;</li>
  <li>Update layout content using content partials;</li>
  <li>Modify page-specific CSS using body classes.</li>
</ul>

<h2>Layout Class Configuration</h2>

<p>
With the <code>Lato::Btstrap</code> class, you can customize the Bootstrap classes used by Lato for the layout’s UI components.<br>
The layout is composed of the following UI elements: <b>navbar</b>, <b>content</b>, <b>sidebar</b>, and <b>footer</b>.<br>
To override the default classes, you can create an initializer with the following code:
</p>

<pre>
Lato.bootstrap do |btstrap|
  btstrap.navbar = 'navbar-light navbar-expand-lg fixed-top bg-light shadow-sm px-3'
  btstrap.navbar_container = 'container-fluid'
  btstrap.navbar_collapse = 'justify-content-end'

  btstrap.sidebar = 'sidebar'

  btstrap.content = 'p-3'
  btstrap.content_container = 'container-fluid'

  btstrap.footer = 'bg-light px-3 py-2'
  btstrap.footer_container = 'container-fluid'
end
</pre>

<p>
<%= link_to 'Source code: Example', 'https://github.com/lato-org/lato/blob/main/test/dummy/config/initializers/lato_bootstrap.rb', target: '_blank' %><br>
<%= link_to 'Source code: Lato::Btstrap', 'https://github.com/lato-org/lato/blob/main/lib/lato/btstrap.rb', target: '_blank' %>
</p>

<h2>Layout Behavior Customization</h2>

<p>
Lato’s layout behavior can be customized using methods provided by the <code>Lato::Layoutable</code> concern.<br>
This concern offers a set of useful functions. Here’s an example:
</p>

<pre>
class TutorialController < ApplicationController
  def index
    hide_sidebar # hides the sidebar
    show_sidebar # shows the sidebar
    active_sidebar(:tutorial) # sets active state on sidebar item with key :tutorial
    active_navbar(:tutorial) # sets active state on navbar item with key :tutorial
    page_title('Custom title') # sets the page title
    page_class('custom-class') # adds a CSS class to the body element
  end
end
</pre>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Note</h4>
  <p>
  All <code>Lato::Layoutable</code> methods can also be used inside controller <code>before_action</code> callbacks.
  </p>
</div>

<p>
<%= link_to 'Source code: Lato::Layoutable', 'https://github.com/lato-org/lato/blob/main/app/controllers/concerns/lato/layoutable.rb', target: '_blank' %>
</p>

<h2>Layout Content Customization</h2>

<p>
Most layout content in Lato is defined via specific partials following the naming convention <code>_partial-name_content.html.erb</code>.<br>
To customize these layout parts, override and edit the partials as desired.<br>
These partials are automatically loaded into the main application via the <code>rails lato:install:application</code> command.
</p>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Note</h4>
  <p>
  This same partial-based approach is used for email templates (see <code>_mailer-head_content.html.erb</code> and <code>_mailer-foot_content.html.erb</code>).
  </p>
</div>

<p>
<%= link_to 'Source code: partials directory', 'https://github.com/lato-org/lato/tree/main/app/views/layouts/lato', target: '_blank' %>
</p>

<h2>Page CSS Customization</h2>

<p>
To easily apply custom CSS rules to specific pages, you can use the classes applied to the <code>&lt;body&gt;</code> tag.<br>
The <code>body</code> always includes two classes that identify the controller and the action rendering the view.<br>
</p>
<p>
For example, if you have an <code>tutorial</code> action inside the <code>HelpController</code>, the <code>body</code> will have the classes:<br>
<code>.controller-help</code><br>
<code>.action-tutorial</code>
</p>

<div class="alert alert-dark mt-3">
  <h4 class="alert-heading">Nice to have</h4>
  <p>
  You can also add a third class based on the HTML template name when rendering the same template from multiple actions.
  </p>
</div>
