<%= lato_page_head 'Personalizzazione', [
  { label: 'Tutorial', path: tutorial_path },
  { label: 'Personalizzazione' }
] %>

<p>
La personalizzazione di Lato può avvenire in diversi modi:
</p>

<ul>
  <li>Configura le classi del layout di Bootstrap tramite la classe <code>Lato::Btstrap</code>;</li>
  <li>Personalizza il comportamento delle componenti del layout tramite il concern <code>Lato::Layoutable</code>;</li>
  <li>Aggiorna il contenuto del layout tramite i content partials;</li>
  <li>Modifica il CSS di specifiche pagine tramite le classi del body.</li>
</ul>

<h2>Configurazione classi layout</h2>

<p>
Attraverso la classe <code>Lato::Btstrap</code> è possibile personalizzare le classi di Bootstrap utilizzate da Lato per gli elementi grafici del layout.<br>
Gli elementi grafici che compongono il layout sono: <b>navbar</b>, <b>content</b>, <b>sidebar</b> e <b>footer</b>.<br>
Per personalizzare le classi di default puoi creare un initializer è inserire il codice seguente:
</p>

<pre>
Lato.bootstrap do |btstrap|
  btstrap.navbar = 'navbar-light navbar-expand-lg fixed-top bg-light shadow-sm px-3'
  btstrap.navbar_container = 'container-fluid'
  btstrap.navbar_collapse = 'justify-content-end'

  btstrap.sidebar = 'sidebar'

  btstrap.content = 'p-3'
  btstrap.content_container = 'container-fluid'

  btstrap.footer = 'bg-light px-3 py-2'
  btstrap.footer_container = 'container-fluid'
end
</pre>

<p>
<%= link_to 'Source code: Esempio', 'https://github.com/lato-org/lato/blob/main/test/dummy/config/initializers/lato_bootstrap.rb', target: '_blank' %><br>
<%= link_to 'Source code: Lato::Btstrap', 'https://github.com/lato-org/lato/blob/main/lib/lato/btstrap.rb', target: '_blank' %>
</p>

<h2>Personalizzazione comportamento layout</h2>

<p>
Il comportamento del layout di Lato può essere personalizzato tramite le funzioni messe a disposizione dal concern <code>Lato::Layoutable</code>.<br>
Il concern disponde di una serie di funzioni utili. Di seguito un esempio:
</p>

<pre>
class TutorialController < ApplicationController
  def index
    hide_sidebar # nasconde la sidebar
    show_sidebar # visualizza la sidebar
    active_sidebar(:tutorial) # imposta l'active sulla voce della sidebar con chiave :tutorial
    active_navbar(:tutorial) # imposta l'active sulla voce della navbar con chiave :tutorial
    page_title('Custom title') # imposta il titolo della pagina
    page_class('custom-class') # aggiunge una classe nel body della pagina
  end
end
</pre>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Note</h4>
  <p>
  Tutte le funzioni di <code>Lato::Layoutable</code> possono essere anche utilizzate tramite i <code>before_action</code> dei controller.
  </p>
</div>

<p>
<%= link_to 'Source code: Lato::Layoutable', 'https://github.com/lato-org/lato/blob/main/app/controllers/concerns/lato/layoutable.rb', target: '_blank' %>
</p>

<h2>Aggiornamento contenuto layout</h2>

<p>
La maggior parte dei contenuti del layout di lato sono impostati tramite appositi parziali chiamati attraverso la sintassi <code>_nome-parziale_content.html.erb</code>.<br>
Per personalizzare il contenuto di queste componenti puoi sovrascrivere il parziale e modificarlo a piacimento.<br>
Questi tipi di parziali sono automaticamente caricati nell'applicazione principale attraverso il comando <code>rails lato:install:application</code>.
</p>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Note</h4>
  <p>
  Lo stesso uso di parziali è applicato anche per i template della mail (vedi <code>_mailer-head_content.html.erb</code> e <code>_mailer-foot_content.html.erb</code>).
  </p>
</div>

<p>
<%= link_to 'Source code: directory con i vari parziali', 'https://github.com/lato-org/lato/tree/main/app/views/layouts/lato', target: '_blank' %>
</p>

<h2>Modifica CSS pagine</h2>

<p>
Per facilitare l'impostazione di regole CSS per specifiche pagine puoi utilizzare le classi applicate al body.<br>
Il body contiene sempre due classi che specificano il controller e la action che lo renderizzando.<br>
</p>
<p>
Se, per esempio, abbiamo la action <code>tutorial</code> dentro il controller <code>HelpController</code>, allora il body avrà le classi:<br>
<code>.controller-help</code><br>
<code>.action-tutorial</code>
</p>

<div class="alert alert-dark mt-3">
  <h4 class="alert-heading">Nice to have</h4>
  <p>
  Impostare una terza classe con il nome del template HTML utilizzato per gestire template renderizzati da action diverse.
  </p>
</div>
