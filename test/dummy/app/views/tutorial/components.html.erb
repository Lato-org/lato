<%= lato_page_head 'Componenti', [
  { label: 'Tutorial', path: tutorial_path },
  { label: 'Componenti' }
] %>

<%

def component_code(file)
  File.read(Rails.root.join('app', 'views', 'tutorial', 'components', "_#{file}.html.erb"))
end

%>

<p>
Lato dispone di una serie di componenti funzionali riutilizzabili.<br>
Utilizzando le componenti di Lato è possibile risparmiare tempo di lavoro e facilitare le attività di manutenzione dell'applicazione.<br>
Tutte le componenti sono disponibili tramite l'helper <code>Lato::ComponentsHelper</code>.
</p>

<p>
<%= link_to 'Source code: Lato::ComponentsHelper', 'https://github.com/lato-org/lato/blob/main/app/helpers/lato/components_helper.rb', target: '_blank' %>
</p>

<h2>Navbar</h2>

<h3>Navbar nav item</h3>

<p>
Componente per renderizzare una voce di menu nella navbar.
Parametri:<br>
- <i>key</i>: chiave della voce di menu. Utilizzata per attivare la voce di menu se impostata attiva tramite la funzione <code>active_navbar</code> del concern <code>Lato::Layoutable</code>.<br>
- <i>path</i>: path o url assoluto dove rimandare l'utente.<br>
- <i>&block</i>: blocco di HTML da renderizzare all'interno della voce di menu.
</p>

<pre>
&#60;%= lato_navbar_nav_item :account, lato.account_path do %&#62;
  Account
&#60;% end %&#62;
</pre>

<h2>Sidebar</h2>

<h3>Sidebar nav item</h3>

<p>
Componente per renderizzare una voce di menu nella sidebar.
Parametri:<br>
- <i>key</i>: chiave della voce di menu. Utilizzata per attivare la voce di menu se impostata attiva tramite la funzione <code>active_sidebar</code> del concern <code>Lato::Layoutable</code>.<br>
- <i>path</i>: path o url assoluto dove rimandare l'utente.<br>
- <i>&block</i>: blocco di HTML da renderizzare all'interno della voce di menu.
</p>

<pre>
&#60;%= lato_sidebar_nav_item :account, lato.account_path do %&#62;
  Account
&#60;% end %&#62;
</pre>

<h2>Page</h2>

<h3>Page head</h3>

<pre>
&#60;%= lato_page_head 'Titolo pagina' %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_page_head 'Titolo pagina' %>
</div>

<pre>
&#60;%= lato_page_head 'Titolo pagina', [{ label: 'Titolo 1', path: main_app.page_path }, { label: 'Titolo 2' }] %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_page_head 'Titolo pagina', [{ label: 'Titolo 1', path: '#' }, { label: 'Titolo 2' }] %>
</div>

<pre>
&#60;%= lato_page_head 'Titolo pagina' do %&#62;
  &#60p class="lead"&#62;Benvenuto in questa pagina&#60/p&#62;
&#60;% end %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_page_head 'Titolo pagina' do %>
  <p class="lead">Benvenuto in questa pagina</p>
<% end %>
</div>

<h2>Form</h2>

<p>
I form possono essere generati utilizzando le componenti <code>lato_form</code>.<br>
Le componenti <code>lato_form</code> sono una serie di componenti diverse programmate per essere utilizzate con l'helper Rails <code>form_with</code> e il controller Stimulus <code>lato_form_controller</code>.<br>
Di seguito la lista di componenti disponibili e un esempio di utilizzo:
<ul>
  <li><code>lato_form_notices</code> visualizza il feedback positivo al salvataggio (notice impostati dalla action).</li>
  <li><code>lato_form_errors</code> visualizza il feedback negativo al salvataggio (errori presenti nell'istanza del modello).</li>
  <li><code>lato_form_item_label</code> visualizza la label dei campi.</li>
  <li><code>lato_form_item_input_text</code> visualizza un input di testo.</li>
  <li><code>lato_form_item_input_email</code> visualizza un input email.</li>
  <li><code>lato_form_item_input_password</code> visualizza un input password.</li>
  <li><code>lato_form_item_input_check</code> visualizza un input checkbox.</li>
  <li><code>lato_form_item_input_select</code> visualizza un input select.</li>
  <li><code>lato_form_submit</code> visualizza il pulsante di submit.</li>
</ul>
</p>

<pre>
<%= component_code('form-example') %>
</pre>

<div class="example bg-light p-3 mb-3">
<%= render 'tutorial/components/form-example' %>
</div>

<h2>Index</h2>

<p>
La componente <code>lato_index</code> permette di visualizzare facilmente i dati presenti in database.
</p>

<h3>Index (front-end)</h3>

<p>
Il modo più semplice per utilizzare la componente è quello di passargli una collezione di <code>ActiveRecord</code> come parametro:
</p>

<pre>
&#60;%= lato_index Product.all.limit(5) %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index Product.all.limit(5) %>
</div>

<h4>Personalizzare le colonne</h4>

<p>
Le colonne possono essere personalizzate attraverso il parametro <code>:columns</code>:
</p>

<pre>
&#60;%= lato_index Product.all.limit(5), columns: %i[id code status] %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index Product.all.limit(5), columns: %i[id code status] %>
</div>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Note</h4>
  <p>
  I titoli delle colonne possono essere modificati attraverso i file di traduzione di Rails.<br>
  Esempio:
  </p>
<pre>
it:
  activerecord:
    attributes:
      product:
        code: Codice
        status: Stato
</pre>
</div>

<h4>Personalizzare il contenuto delle colonne</h4>

<p>
Il contenuto delle colonne può essere personalizzato creando degli appositi helper con la sintassi <code>model_column(member)</code>.<br>
Per esempio, per personalizzare l'output della colonna :lato_user_id è stato creato il seguente helper in <code>ProductsHelper</code>:
</p>

<pre>
class ProductsHelper
  def product_lato_user_id(product)
    product.lato_user.full_name
  end
end
</pre>

<h4>Aggiungere colonne custom</h4>

<p>
Per aggiungere colonne custom ad una tabella basta specificare il nome del metodo dichiarato nel modello per fornire il dato corrispondente.<br>
Per esempio, dopo aver aggiunto il metodo <code>lifetime</code> al modello <code>Product</code>, è possibile utilizzare la colonna <code>:lifetime</code>:
</p>

<pre>
class Product < ApplicationRecord
  # Helpers
  ##

  def lifetime
    Time.now - created_at
  end
end
</pre>

<pre>
class ProductsHelper
  def product_lifetime(product)
    Time.at(product.lifetime).utc.strftime('%H h %M m')
  end
end
</pre>

<pre>
&#60;%= lato_index Product.all.limit(5), columns: %i[id code status lifetime] %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index Product.all.limit(5), columns: %i[id code status lifetime] %>
</div>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Note</h4>
  <p>
  Anche le colonne custom possono essere tradotte dai file di traduzione di Rails proprio come le colonne realmente presenti in database.
  </p>
  <p>
  Per aggiungere eventuali colonne che non corrispondo ad attributi reali del prodotto è possibile, invece di dichiarare una funzione nel modello, specificare la colonna con <code>attr_accessor :nome_colonna</code>:
  </p>
<pre>
class Product < ApplicationRecord
  attr_accessor :lifetime
end
</pre>
</div>

<h4>Aggiungere azioni</h4>

<pre>
&#60;%= lato_index Product.all.limit(5), custom_actions: {
    create: {
      path: products_create_path,
      icon: 'bi bi-plus',
      aria_label: 'Crea prodotto',
      title: 'Crea prodotto'
    }
 } %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index Product.all.limit(5), custom_actions: {
    create: {
      path: products_create_path,
      icon: 'bi bi-plus',
      arial_label: 'Crea prodotto',
      title: 'Crea prodotto'
    }
 } %>
</div>

<h4>Aggiungere azioni in-page</h4>

<pre>
&#60;%= lato_index Product.all.limit(5), custom_actions: {
    create: {
      path: products_create_path,
      icon: 'bi bi-plus',
      data: { lato_action_target: 'trigger', turbo_frame: dom_id(Product.new, 'form') },
      aria_label: 'Crea prodotto',
      title: 'Crea prodotto'
    }
 } %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index Product.all.limit(5), custom_actions: {
    create: {
      path: products_create_path,
      icon: 'bi bi-plus',
      data: { lato_action_target: 'trigger', turbo_frame: dom_id(Product.new, 'form') },
      arial_label: 'Crea prodotto',
      title: 'Crea prodotto'
    }
 } %>
</div>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Note</h4>
  <p>
  L'opzione <code>:create_turbo_frame</code> specifica l'ID del turbo-frame presente nella pagina <code>products_create_path</code> che deve essere inserito all'interno dell'overlay.
  </p>
</div>

<h4>Aggiungere azioni alle singole righe</h4>

<p>
Le azioni sulle singole righe possono essere aggiunte attraverso l'aggiunta di colonne custom (come visto precedentemente).<br>
Anche le azioni sulle righe possono essere aperte in-page tramite overlay specificando gli attributi <code>data-lato-index-target="action"</code> e <code>data-turbo-frame="ID-turbo-frame-da-caricare"</code>.
</p>

<pre>
class ProductsHelper
  def product_actions(product)
    content_tag(:div, class: 'btn-group btn-group-sm') do
      concat link_to(
        'Modifica',
        products_update_path(product),
        class: 'btn btn-primary',
        data: { lato_action_target: 'trigger', turbo_frame: dom_id(product, 'form') }
      )
    end
  end
end
</pre>

<pre>
&#60;%= lato_index Product.all.limit(5), columns: %i[id code status lifetime actions] %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index Product.all.limit(5), columns: %i[id code status lifetime actions] %>
</div>

<h3>Index (back-end)</h3>

<p>
Per rendere l'index completamente interattivo è necessario utilizzare la funzione <code>lato_index_collection</code> del concern <code>Lato::Componentable</code> nel controller.
</p>

<pre>
def index
  @products = lato_index_collection(Product.all, pagination: true)
end
</pre>

<pre>
&#60;%= lato_index @products %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index @products, key: 'products' %>
</div>

<h4>Personalizzare le colonne</h4>

<pre>
def index
  @products_columns = lato_index_collection(
    Product.all,
    pagination: true,
    columns: %i[code status id]
  )
end
</pre>

<pre>
&#60;%= lato_index @products_columns %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index @products_columns, key: 'products_columns' %>
</div>

<h4>Personalizzare il numero di elementi per pagina</h4>

<p>
Il numero di elementi per pagina può essere impostato dall'utente tramite un selettore con diversi opzioni. Il selettore può essere attivato e personalizzato tramite il parametro <code>:pagination_options</code> della funzione <code>lato_index_collection</code>.
</p>

<pre>
def index
  @products_pagination_options = lato_index_collection(
    Product.all,
    pagination: 10,
    columns: %i[code status id],
    key: 'products_pagination_options'
  )
end
</pre>

<pre>
&#60;%= lato_index @products_pagination_options, pagination_options: [10,20,50,100] %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index @products_pagination_options, pagination_options: [10,20,50,100], key: 'products_pagination_options' %>
</div>

<h4>Rendere le colonne ordinabili</h4>

<pre>
def index
  @products_sortable_columns = lato_index_collection(
    Product.all,
    pagination: true,
    columns: %i[code status lato_user_id],
    sortable_columns: %i[code status lato_user_id]
  )
end
</pre>

<pre>
&#60;%= lato_index @products_sortable_columns %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index @products_sortable_columns, key: 'products_sortable_columns' %>
</div>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Note</h4>
  <p>
  Per personalizzare le regole di ordinamento è possibile definire lo scope <code>lato_index_order</code> all'interno del modello.<br>
  Esempio
  </p>
<pre>
class Product < ApplicationRecord
  # Relations
  ##

  belongs_to :lato_user, class_name: 'Lato::User'

  # Scopes
  ##

  scope :lato_index_order, ->(column, order) do
    return joins(:lato_user).order("lato_users.last_name #{order}, lato_users.first_name #{order}") if column == :lato_user_id

    order("#{column} #{order}")
  end
end
</pre>
</div>

<h4>Rendere le colonne ricercabili</h4>

<pre>
def index
  @products_searchable_columns = lato_index_collection(
    Product.all,
    pagination: true,
    columns: %i[code status lato_user_id],
    sortable_columns: %i[code status lato_user_id],
    searchable_columns: %i[code lato_user_id]
  )
end
</pre>

<pre>
&#60;%= lato_index @products_searchable_columns %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index @products_searchable_columns, key: 'products_searchable_columns' %>
</div>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Note</h4>
  <p>
  Per personalizzare le regole di ricerca è possibile definire lo scope <code>lato_index_search</code> all'interno del modello.<br>
  Esempio
  </p>
<pre>
class Product < ApplicationRecord
  # Relations
  ##

  belongs_to :lato_user, class_name: 'Lato::User'

  # Scopes
  ##

  scope :lato_index_search, ->(search) do
    joins(:lato_user).where("
      lower(code) LIKE :search OR
      lower(lato_users.first_name) LIKE :search OR
      lower(lato_users.last_name) LIKE :search
    ", search: "%#{search.downcase.strip}%")
  end
end
</pre>
</div>
