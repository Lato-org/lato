<%= lato_page_head 'Operazioni', [
  { label: 'Tutorial', path: tutorial_path },
  { label: 'Operazioni' }
] %>

<p>
Le operazioni sono un sistema di Lato per gestire visualmente l'esecuzione di Job in background.<br>
Le operazioni sono gestite da diverse parti:
</p>

<ul>
  <li>Il modello <code>Lato::Operation</code> inizializza tutte le operazioni e tiene traccia del loro stato di esecuzione.</li>
  <li>Il controller <code>Lato::OperationsController</code> gestisce l'accesso degli utenti ad una operazione in corso.</li>
  <li>La componente <code>lato_operation</code> permette di visualizzare a front-end lo stato di una operazione.</li>
</ul>

<h3>Convertire un Job in una operazione</h3>

<p>
Il metodo più facile per convertire un Job in una operazione è, semplicemente, fare in modo che il Job sia una sotto-classe di <code>Lato::ApplicationJob</code>.<br>
È inoltre necessario che il metodo <code>perform()</code> riceva un solo parametro Hash <code>params</code>.
</p>

<pre>
# Prima
def MyJob < ApplicationJob
  def perform(hello)
    puts hello
  end
end

# Dopo
def MyJob < Lato::ApplicationJob
  def perform(params = {})
    puts params['hello']
  end
end
</pre>

<h3>Generare una operazione</h3>

<p>
Le operazioni possono essere generate tramite il metodo <code>generate</code> del modello <code>Lato::Operation</code>.<br>
La generazione di un'operazione richiede tre parametri: nome del job da eseguire, Hash dei parametri da passare, id dell'utente che ha richiesto la generazione.
</p>

<pre>
operation = Lato::Operation.generate('ExportProductsJob', { product_ids: [1, 2, 3] }, @session.user_id)
</pre>

<p>
Una volta generata l'operazione deve essere eseguita attraverso il metodo <code>start</code>.<br>
Di seguito un esempio di controller che avvia una operazione:
</p>

<pre>
class CustomController < ApplicationController
  def create_operation_action
    @operation = Lato::Operation.generate('OperationExampleJob', {}, @session.user_id)

    respond_to do |format|
      if @operation.start
        format.html { redirect_to lato.operation_path(@operation) }
        format.json { render json: @operation }
      else
        format.html { render :index, status: :unprocessable_entity }
        format.json { render json: @operation.errors, status: :unprocessable_entity }
      end
    end
  end
end
</pre>

<h3>Mostrare l'esito di una operazione</h3>

<p>
Ogni operazione può essere visualizzata nella route <code>lato.operation_path(operation_id)</code>.<br>
Per garantire la sicurezza dei dati un'operazione è accessibile solo per l'utente che ne ha richiesto la generazione.
</p>

<p>
Ogni operazione può avere 4 stati: <code>created</code>, <code>running</code>, <code>completed</code>, <code>failed</code>.<br>
La visualizzazione di una operazione, gestita tramite la componente <code>lato_operation</code>, mostra in real-time lo stato in cui si trova l'operazione e il relativo output.<br>
Utilizza il link di seguito per provare una operazione:
</p>

<pre>
&#60;%= link_to 'Genera operazione',
  main_app.custom_create_operation_action_path,
  data: { turbo_method: :post }
%&#62;
</pre>

<%= link_to 'Genera operazione', main_app.operations_create_operation_action_path, data: { turbo_method: :post } %>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Note</h4>
  <p>
  Per visualizzare l'esito di una operazione direttamente in-page è possibile utilizzare le funzionalità di <code>lato_action_controller</code>.<br>
  Esempio:
  </p>
<pre>
&#60;%= link_to 'Genera operazione',
  main_app.custom_create_operation_action_path,
  data: { lato_action_target: 'trigger', turbo_method: :post, turbo_frame: 'lato_operation' }
%&#62;
</pre>
<%= link_to 'Genera operazione con successo', main_app.operations_create_operation_action_path, data: { lato_action_target: 'trigger', turbo_method: :post, turbo_frame: 'lato_operation' } %>
</div>

<h3>Gestire gli output di una operazione</h3>

<p>
Gli output di una operazione possono essere gestiti direttamente all'interno del Job che la esegue tramite una serie di funzioni.<br>
Tutte le funzioni per gestire l'output di una operazione possono essere chiamate anche se il Job viene eseguito normalmente (senza utilizzare il modello <code>Lato::Operation</code>).
</p>

<h4>Specificare un messaggio di output</h4>

<p>
<%= link_to 'Genera operazione', main_app.operations_create_operation_action_path(type: 'success'), data: { lato_action_target: 'trigger', turbo_method: :post, turbo_frame: 'lato_operation' } %>
</p>

<pre>
class MyJob < Lato::ApplicationJob
  def perform(params = {})
    save_operation_output_message("Messaggio di successo dell'operazione")
  end
end
</pre>

<h4>Specificare un file di output</h4>

<p>
<%= link_to 'Genera operazione', main_app.operations_create_operation_action_path(type: 'file'), data: { lato_action_target: 'trigger', turbo_method: :post, turbo_frame: 'lato_operation' } %>
</p>

<pre>
class MyJob < Lato::ApplicationJob
  def perform(params = {})
    file_path = Rails.root.join('tmp', 'myfile.csv')
    save_operation_output_file(file_path)
  end
end
</pre>

<h4>Specificare un errore</h4>

<p>
<%= link_to 'Genera operazione', main_app.operations_create_operation_action_path(type: 'failed'), data: { lato_action_target: 'trigger', turbo_method: :post, turbo_frame: 'lato_operation' } %>
</p>

<pre>
class MyJob < Lato::ApplicationJob
  def perform(params = {})
    raise "Messaggio di errore dell'operazione"
  end
end
</pre>

<h4>Aggiornare la percentuale di avanzamento</h4>

<p>
<%= link_to 'Genera operazione', main_app.operations_create_operation_action_path(type: 'percentage'), data: { lato_action_target: 'trigger', turbo_method: :post, turbo_frame: 'lato_operation' } %>
</p>

<pre>
class MyJob < Lato::ApplicationJob
  def perform(params = {})
    10.times do |index|
      sleep(1)
      update_operation_percentage((index + 1) * 10)
    end
  end
end
</pre>

<h4>Specificare un file di input</h4>

<div class="example bg-light p-3 mb-3">
  <%= form_with url: main_app.operations_create_operation_action_path(type: 'file_input'), data: { lato_action_target: 'triggerSubmit', turbo_frame: 'lato_operation', controller: 'lato-form' } do |form| %>
    <div class="col mb-3">
      <%= lato_form_item_label form, :file %>
      <%= lato_form_item_input_file form, :file, required: true %>
    </div>

    <div class="d-flex justify-content-end">
      <%= lato_form_submit form, 'Genera operazione', class: %w[btn-success] %>
    </div>
  <% end %>
</div>

<pre>
&#60;%= form_with
  url: create_operation_action_path(type: 'file_input'),
  data: {
    lato_action_target: 'triggerSubmit',
    turbo_frame: 'lato_operation',
    controller: 'lato-form'
  } do |form| %&#62;

...
</pre>

<pre>
class CustomController < ApplicationController
  def create_operation_action
    @operation = Lato::Operation.generate('OperationExampleJob', {}, @session.user_id, params[:file])
    # ...
  end
end
</pre>

<pre>
class MyJob < Lato::ApplicationJob
  def perform(params = {})
    save_operation_output_message("Hai caricato il file #{operation_input_file_attachment.filename}")
  end
end
</pre>
