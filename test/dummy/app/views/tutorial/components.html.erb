<%= lato_page_head 'Components', [
  { label: 'Tutorial', path: tutorial_path },
  { label: 'Components' }
] %>

<%

def component_code(file)
  File.read(Rails.root.join('app', 'views', 'tutorial', 'components', "_#{file}.html.erb"))
end

%>

<p>
Lato provides a set of reusable functional components.<br>
By using Lato components, you can save development time and simplify maintenance tasks.<br>
All components are available via the <code>Lato::ComponentsHelper</code> helper.
</p>

<p>
<%= link_to 'Source code: Lato::ComponentsHelper', 'https://github.com/lato-org/lato/blob/main/app/helpers/lato/components_helper.rb', target: '_blank', class: 'llm-ignore' %>
</p>

<h2>Navbar</h2>

<h3>Navbar nav item</h3>

<p>
Component to render a menu item in the navbar.<br>
Parameters:<br>
- <i>key</i>: the menu item's key. Used to activate the item via the <code>active_navbar</code> function from the <code>Lato::Layoutable</code> concern.<br>
- <i>path</i>: a path or absolute URL to redirect the user.<br>
- <i>&block</i>: block of HTML to render inside the menu item.
</p>

<pre>
&#60;%= lato_navbar_nav_item :account, lato.account_path do %&#62;
  Account
&#60;% end %&#62;
</pre>

<h2>Sidebar</h2>

<h3>Sidebar nav item</h3>

<p>
Component to render a menu item in the sidebar.<br>
Parameters:<br>
- <i>key</i>: the menu item's key. Used to activate the item via the <code>active_sidebar</code> function from the <code>Lato::Layoutable</code> concern.<br>
- <i>path</i>: a path or absolute URL to redirect the user.<br>
- <i>&block</i>: block of HTML to render inside the menu item.
</p>

<pre>
&#60;%= lato_sidebar_nav_item :account, lato.account_path do %&#62;
  Account
&#60;% end %&#62;
</pre>

<h2>Page</h2>

<h3>Page head</h3>

<pre>
&#60;%= lato_page_head 'Page title' %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_page_head 'Page title' %>
</div>

<pre>
&#60;%= lato_page_head 'Page title', [{ label: 'Title 1', path: main_app.page_path }, { label: 'Title 2' }] %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_page_head 'Page title', [{ label: 'Title 1', path: '#' }, { label: 'Title 2' }] %>
</div>

<pre>
&#60;%= lato_page_head 'Page title' do %&#62;
  &#60p class="lead"&#62;Welcome to this page&#60/p&#62;
&#60;% end %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_page_head 'Page title' do %>
  <p class="lead">Welcome to this page</p>
<% end %>
</div>

<h2>Form</h2>

<p>
Forms can be generated using the <code>lato_form</code> components.<br>
<code>lato_form</code> components are a set of utilities designed to work with Rails' <code>form_with</code> helper and the Stimulus controller <code>lato_form_controller</code>.<br>
Below is a list of available components with usage examples:
<ul>
  <li><code>lato_form_notices</code> displays success feedback (notices set by the controller action).</li>
  <li><code>lato_form_errors</code> displays error feedback (based on model instance errors).</li>
  <li><code>lato_form_item_label</code> renders the field label.</li>
  <li><code>lato_form_item_input_text</code> renders a text input.</li>
  <li><code>lato_form_item_input_number</code> renders a number input.</li>
  <li><code>lato_form_item_input_email</code> renders an email input.</li>
  <li><code>lato_form_item_input_password</code> renders a password input.</li>
  <li><code>lato_form_item_input_check</code> renders a checkbox input.</li>
  <li><code>lato_form_item_input_select</code> renders a select input.</li>
  <li><code>lato_form_item_input_file</code> renders a file input.</li>
  <li><code>lato_form_item_input_textarea</code> renders a textarea input.</li>
  <li><code>lato_form_item_input_date</code> renders a date input.</li>
  <li><code>lato_form_item_input_datetime</code> renders a datetime input.</li>
  <li><code>lato_form_item_input_time</code> renders a time input.</li>
  <li><code>lato_form_item_input_color</code> renders a color input.</li>
  <li><code>lato_form_submit</code> renders the submit button.</li>
</ul>
</p>

<pre>
<%= component_code('form-example') %>
</pre>

<div class="example bg-light p-3 mb-3">
<%= render 'tutorial/components/form-example' %>
</div>

<h2>Index</h2>

<p>
The <code>lato_index</code> component allows easy visualization of database records.
</p>

<h3>Index (front-end)</h3>

<p>
The simplest way to use the component is to pass it an <code>ActiveRecord</code> collection:
</p>

<pre>
&#60;%= lato_index Product.all.limit(5) %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index Product.all.limit(5) %>
</div>

<h4>Customizing columns</h4>

<p>
Columns can be customized using the <code>:columns</code> parameter:
</p>

<pre>
&#60;%= lato_index Product.all.limit(5), columns: %i[id code status] %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index Product.all.limit(5), columns: %i[id code status] %>
</div>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Notes</h4>
  <p>
  Column titles can be customized using Rails translation files.<br>
  Example:
  </p>
<pre>
en:
  activerecord:
    attributes:
      product:
        code: Code
        status: Status
</pre>
</div>

<h4>Customizing column content</h4>

<p>
You can customize column content by creating helper methods with the format <code>model_column(record)</code>.<br>
For example, to customize the output of the :lato_user_id column, define the following helper in <code>ProductsHelper</code>:
</p>

<pre>
class ProductsHelper
  def product_lato_user_id(product)
    product.lato_user.full_name
  end
end
</pre>

<h4>Adding custom columns</h4>

<p>
To add custom columns, declare a method in the model that provides the value.<br>
For example, after adding a <code>lifetime</code> method to the <code>Product</code> model, you can use the <code>:lifetime</code> column:
</p>

<pre>
class Product < ApplicationRecord
  def lifetime
    Time.now - created_at
  end
end
</pre>

<pre>
class ProductsHelper
  def product_lifetime(product)
    Time.at(product.lifetime).utc.strftime('%H h %M m')
  end
end
</pre>

<pre>
&#60;%= lato_index Product.all.limit(5), columns: %i[id code status lifetime] %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index Product.all.limit(5), columns: %i[id code status lifetime] %>
</div>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Notes</h4>
  <p>
  Custom columns can also be translated using Rails translation files, just like database-backed columns.
  </p>
  <p>
  To add columns that don't map to real attributes, use <code>attr_accessor :column_name</code> instead of defining a method in the model:
  </p>
<pre>
class Product < ApplicationRecord
  attr_accessor :lifetime
end
</pre>
</div>

<h4>Adding actions</h4>

<pre>
&#60;%= lato_index Product.all.limit(5), custom_actions: {
    create: {
      path: products_create_path,
      icon: 'bi bi-plus',
      aria_label: 'Create product',
      title: 'Create product'
    }
 } %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index Product.all.limit(5), custom_actions: {
    create: {
      path: products_create_path,
      icon: 'bi bi-plus',
      arial_label: 'Crea prodotto',
      title: 'Crea prodotto'
    }
 } %>
</div>

<h4>Adding in-page actions</h4>

<pre>
&#60;%= lato_index Product.all.limit(5), custom_actions: {
    create: {
      path: products_create_path,
      icon: 'bi bi-plus',
      data: { lato_action_target: 'trigger', turbo_frame: dom_id(Product.new, 'form') },
      aria_label: 'Create product',
      title: 'Create product'
    }
 } %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index Product.all.limit(5), custom_actions: {
    create: {
      path: products_create_path,
      icon: 'bi bi-plus',
      data: { lato_action_target: 'trigger', turbo_frame: dom_id(Product.new, 'form') },
      arial_label: 'Crea prodotto',
      title: 'Crea prodotto'
    }
 } %>
</div>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Notes</h4>
  <p>
  The <code>:create_turbo_frame</code> option specifies the turbo-frame ID in the <code>products_create_path</code> page that should be inserted into the overlay.
  </p>
</div>

<h4>Adding row-specific actions</h4>

<p>
Row-specific actions can be added through custom columns (as shown above).<br>
These actions can also be opened in-page via overlays using <code>data-lato-index-target="action"</code> and <code>data-turbo-frame="turbo-frame-ID"</code>.
</p>

<pre>
class ProductsHelper
  def product_actions(product)
    content_tag(:div, class: 'btn-group btn-group-sm') do
      concat link_to(
        'Edit',
        products_update_path(product),
        class: 'btn btn-primary',
        data: { lato_action_target: 'trigger', turbo_frame: dom_id(product, 'form') }
      )
    end
  end
end
</pre>

<pre>
&#60;%= lato_index Product.all.limit(5), columns: %i[id code status lifetime actions] %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index Product.all.limit(5), columns: %i[id code status lifetime actions] %>
</div>

<h3>Index (back-end)</h3>

<p>
To make the index fully interactive, use the <code>lato_index_collection</code> function from the <code>Lato::Componentable</code> concern in the controller.
</p>

<pre>
def index
  @products = lato_index_collection(Product.all, pagination: true)
end
</pre>

<pre>
&#60;%= lato_index @products %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index @products, key: 'products' %>
</div>

<h4>Customizing columns</h4>

<pre>
def index
  @products_columns = lato_index_collection(
    Product.all,
    pagination: true,
    columns: %i[code status id]
  )
end
</pre>

<pre>
&#60;%= lato_index @products_columns %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index @products_columns, key: 'products_columns' %>
</div>

<h4>Customizing pagination size</h4>

<p>
Users can choose how many items to display per page using a selector enabled via the <code>:pagination_options</code> parameter in <code>lato_index_collection</code>.
</p>

<pre>
def index
  @products_pagination_options = lato_index_collection(
    Product.all,
    pagination: 10,
    columns: %i[code status id],
    key: 'products_pagination_options'
  )
end
</pre>

<pre>
&#60;%= lato_index @products_pagination_options, pagination_options: [10,20,50,100] %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index @products_pagination_options, pagination_options: [10,20,50,100], key: 'products_pagination_options' %>
</div>

<h4>Making columns sortable</h4>

<pre>
def index
  @products_sortable_columns = lato_index_collection(
    Product.all,
    pagination: true,
    columns: %i[code status lato_user_id],
    sortable_columns: %i[code status lato_user_id]
  )
end
</pre>

<pre>
&#60;%= lato_index @products_sortable_columns %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index @products_sortable_columns, key: 'products_sortable_columns' %>
</div>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Notes</h4>
  <p>
  To customize sorting logic, define the <code>lato_index_order</code> scope inside the model.<br>
  Example:
  </p>
<pre>
class Product < ApplicationRecord
  belongs_to :lato_user, class_name: 'Lato::User'

  scope :lato_index_order, ->(column, order) do
    return joins(:lato_user).order("lato_users.last_name #{order}, lato_users.first_name #{order}") if column == :lato_user_id

    order("#{column} #{order}")
  end
end
</pre>
</div>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Notes</h4>
  <p>
  To set a default sorting column, use the <code>default_sort_by</code> option in the <code>lato_index_collection</code> method.<br>
  Example:
  </p>
<pre>
def index
  @products_default_sort = lato_index_collection(
    Product.all,
    pagination: true,
    columns: %i[code status lato_user_id],
    sortable_columns: %i[code status lato_user_id],
    default_sort_by: 'code|asc' # 'column|direction'
  )
end
</pre>
</div>


<h4>Making columns searchable</h4>

<pre>
def index
  @products_searchable_columns = lato_index_collection(
    Product.all,
    pagination: true,
    columns: %i[code status lato_user_id],
    sortable_columns: %i[code status lato_user_id],
    searchable_columns: %i[code lato_user_id]
  )
end
</pre>

<pre>
&#60;%= lato_index @products_searchable_columns %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index @products_searchable_columns, key: 'products_searchable_columns' %>
</div>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Notes</h4>
  <p>
  To customize search logic, define the <code>lato_index_search</code> scope inside the model.<br>
  Example:
  </p>
<pre>
class Product < ApplicationRecord
  belongs_to :lato_user, class_name: 'Lato::User'

  scope :lato_index_search, ->(search) do
    joins(:lato_user).where("
      lower(code) LIKE :search OR
      lower(lato_users.first_name) LIKE :search OR
      lower(lato_users.last_name) LIKE :search
    ", search: "%#{search.downcase.strip}%")
  end
end
</pre>
</div>

<h4>Skip total count for large tables</h4>

<p>
For large tables, you can skip the total count to improve performance by setting the <code>:skip_total_count</code> option to <code>true</code> in the <code>lato_index</code> method.
This is useful when you don't need the total count of records, such as when displaying a large collection.
</p> 

<pre>
&#60;%= lato_index @products_searchable_columns, skip_total_count: true %&#62;
</pre>

<div class="example bg-light p-3 mb-3">
<%= lato_index @products_searchable_columns, key: 'products_searchable_columns', skip_total_count: true %>
</div>
