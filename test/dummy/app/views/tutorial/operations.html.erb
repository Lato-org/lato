<%= lato_page_head 'Operations', [
  { label: 'Tutorial', path: tutorial_path },
  { label: 'Operations' }
] %>

<p>
Operations are Lato's system for visually managing the execution of background Jobs.<br>
Operations are handled by several components:
</p>

<ul>
  <li>The <code>Lato::Operation</code> model initializes all operations and tracks their execution state.</li>
  <li>The <code>Lato::OperationsController</code> controller manages user access to an ongoing operation.</li>
  <li>The <code>lato_operation</code> component allows displaying the operation status in the front-end.</li>
</ul>

<h3>Converting a Job into an Operation</h3>

<p>
The easiest way to convert a Job into an operation is to simply make the Job a subclass of <code>Lato::ApplicationJob</code>.<br>
Additionally, the <code>perform()</code> method must accept a single Hash parameter called <code>params</code>.
</p>

<pre>
# Before
def MyJob < ApplicationJob
  def perform(hello)
    puts hello
  end
end

# After
def MyJob < Lato::ApplicationJob
  def perform(params = {})
    puts params['hello']
  end
end
</pre>

<h3>Generating an Operation</h3>

<p>
Operations can be generated using the <code>generate</code> method of the <code>Lato::Operation</code> model.<br>
Creating an operation requires three parameters: the name of the job to execute, a Hash of parameters to pass, and the ID of the user requesting the operation.
</p>

<pre>
operation = Lato::Operation.generate('ExportProductsJob', { product_ids: [1, 2, 3] }, @session.user_id)
</pre>

<p>
Once generated, the operation must be started using the <code>start</code> method.<br>
Here is an example controller that starts an operation:
</p>

<pre>
class CustomController < ApplicationController
  def create_operation_action
    @operation = Lato::Operation.generate('OperationExampleJob', {}, @session.user_id)

    respond_to do |format|
      if @operation.start
        format.html { redirect_to lato.operation_path(@operation) }
        format.json { render json: @operation }
      else
        format.html { render :index, status: :unprocessable_entity }
        format.json { render json: @operation.errors, status: :unprocessable_entity }
      end
    end
  end
end
</pre>

<h3>Displaying the Outcome of an Operation</h3>

<p>
Each operation can be viewed at the route <code>lato.operation_path(operation_id)</code>.<br>
To ensure data security, an operation is only accessible to the user who initiated it.
</p>

<p>
Each operation can have four states: <code>created</code>, <code>running</code>, <code>completed</code>, <code>failed</code>.<br>
The operation view, handled via the <code>lato_operation</code> component, shows the real-time status and output of the operation.<br>
Use the link below to try out an operation:
</p>

<pre>
&#60;%= link_to 'Generate Operation',
  main_app.custom_create_operation_action_path,
  data: { turbo_method: :post }
%&#62;
</pre>

<%= link_to 'Generate Operation', main_app.operations_create_operation_action_path, data: { turbo_method: :post }, class: 'llm-ignore' %>

<div class="alert alert-info mt-3">
  <h4 class="alert-heading">Notes</h4>
  <p>
  To display the result of an operation directly in-page, you can use <code>lato_action_controller</code> features.<br>
  Example:
  </p>
<pre>
&#60;%= link_to 'Generate Operation',
  main_app.custom_create_operation_action_path,
  data: { lato_action_target: 'trigger', turbo_method: :post, turbo_frame: 'lato_operation' }
%&#62;
</pre>
<%= link_to 'Generate Operation with Success', main_app.operations_create_operation_action_path, data: { lato_action_target: 'trigger', turbo_method: :post, turbo_frame: 'lato_operation' }, class: 'llm-ignore' %>
</div>

<h3>Handling Operation Outputs</h3>

<p>
An operation's output can be handled directly within the Job using a series of helper methods.<br>
These functions can also be called even if the Job is executed without using the <code>Lato::Operation</code> model.
</p>

<h4>Set an Output Message</h4>

<p>
<%= link_to 'Generate Operation', main_app.operations_create_operation_action_path(type: 'success'), data: { lato_action_target: 'trigger', turbo_method: :post, turbo_frame: 'lato_operation' }, class: 'llm-ignore' %>
</p>

<pre>
class MyJob < Lato::ApplicationJob
  def perform(params = {})
    save_operation_output_message("Operation succeeded with this message")
  end
end
</pre>

<h4>Set an Output File</h4>

<p>
<%= link_to 'Generate Operation', main_app.operations_create_operation_action_path(type: 'file'), data: { lato_action_target: 'trigger', turbo_method: :post, turbo_frame: 'lato_operation' }, class: 'llm-ignore' %>
</p>

<pre>
class MyJob < Lato::ApplicationJob
  def perform(params = {})
    file_path = Rails.root.join('tmp', 'myfile.csv')
    save_operation_output_file(file_path)
  end
end
</pre>

<h4>Set an Error</h4>

<p>
<%= link_to 'Generate Operation', main_app.operations_create_operation_action_path(type: 'failed'), data: { lato_action_target: 'trigger', turbo_method: :post, turbo_frame: 'lato_operation' }, class: 'llm-ignore' %>
</p>

<pre>
class MyJob < Lato::ApplicationJob
  def perform(params = {})
    raise "This is the operation error message"
  end
end
</pre>

<h4>Update Progress Percentage</h4>

<p>
<%= link_to 'Generate Operation', main_app.operations_create_operation_action_path(type: 'percentage'), data: { lato_action_target: 'trigger', turbo_method: :post, turbo_frame: 'lato_operation' }, class: 'llm-ignore' %>
</p>

<pre>
class MyJob < Lato::ApplicationJob
  def perform(params = {})
    10.times do |index|
      sleep(1)
      update_operation_percentage((index + 1) * 10)
    end
  end
end
</pre>

<h4>Set an Input File</h4>

<div class="example bg-light p-3 mb-3">
  <%= form_with url: main_app.operations_create_operation_action_path(type: 'file_input'), data: { lato_action_target: 'triggerSubmit', turbo_frame: 'lato_operation', controller: 'lato-form' } do |form| %>
    <div class="col mb-3">
      <%= lato_form_item_label form, :file %>
      <%= lato_form_item_input_file form, :file, required: true %>
    </div>

    <div class="d-flex justify-content-end">
      <%= lato_form_submit form, 'Generate Operation', class: %w[btn-success] %>
    </div>
  <% end %>
</div>

<pre>
&#60;%= form_with
  url: create_operation_action_path(type: 'file_input'),
  data: {
    lato_action_target: 'triggerSubmit',
    turbo_frame: 'lato_operation',
    controller: 'lato-form'
  } do |form| %&#62;

...
</pre>

<pre>
class CustomController < ApplicationController
  def create_operation_action
    @operation = Lato::Operation.generate('OperationExampleJob', {}, @session.user_id, params[:file])
    # ...
  end
end
</pre>

<pre>
class MyJob < Lato::ApplicationJob
  def perform(params = {})
    save_operation_output_message("You uploaded the file #{operation_input_file_attachment.filename}")
  end
end
</pre>
